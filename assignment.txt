ans1)
#include <iostream>
using namespace std;

bool isPowerOfTwo(int n) {
    if (n <= 0)
        return false;

    return (n & (n - 1)) == 0;
}

int main() {
    int n = 16;
    bool result = isPowerOfTwo(n);

    if (result)
        cout << "The number is a power of two." << endl;
    else
        cout << "The number is not a power of two." << endl;

    return 0;
}



ans2)
#include <iostream>
using namespace std;

int sumOfNaturalNumbers(int n) {
    return (n * (n + 1)) / 2;
}

int main() {
    int n = 5;
    int sum = sumOfNaturalNumbers(n);

    cout << "Sum of the first " << n << " natural numbers: " << sum << endl;

    return 0;
}




ans3)
#include <iostream>
using namespace std;

int factorial(int n) {
    if (n <= 1)
        return 1;

    return n * factorial(n - 1);
}

int main() {
    int n = 5;
    int fact = factorial(n);

    cout << "Factorial of " << n << ": " << fact << endl;

    return 0;
}


ans4)
#include <iostream>
using namespace std;

int power(int N, int P) {
    if (P == 0)
        return 1;

    int result = N;
    for (int i = 1; i < P; i++) {
        result *= N;
    }

    return result;
}

int main() {
    int N = 5;
    int P = 2;
    int exponent = power(N, P);

    cout << N << " raised to the power " << P << ": " << exponent << endl;

    return 0;
}


ans 5)
#include <iostream>
#include <vector>
using namespace std;

int findMax(vector<int>& arr, int start, int end) {
    if (start == end)
        return arr[start];

    int mid = (start + end) / 2;
    int leftMax = findMax(arr, start, mid);
    int rightMax = findMax(arr, mid + 1, end);

    return max(leftMax, rightMax);
}

int main() {
    vector<int> arr = {1, 4, 3, -5, -4, 8, 6};
    int maxElement = findMax(arr, 0, arr.size() - 1);

    cout << "Maximum element in the array: " << maxElement << endl;

    return 0;
}


ans6)
#include <iostream>
using namespace std;

int findNthTerm(int a, int d, int N) {
    return a + (N - 1) * d;
}

int main() {
    int a = 2;
    int d = 1;
    int N = 5;
    int nthTerm = findNthTerm(a, d, N);

    cout << "The " << N << "th term of the series is: " << nthTerm << endl;

    return 0;
}

ans 7)
#include <iostream>
#include <algorithm>
using namespace std;

void permute(string str, int l, int r) {
    if (l == r) {
        cout << str << " ";
        return;
    }

    for (int i = l; i <= r; i++) {
        swap(str[l], str[i]);
        permute(str, l + 1, r);
        swap(str[l], str[i]);
    }
}

int main() {
    string str = "ABC";
    int n = str.size();

    sort(str.begin(), str.end());

    cout << "All permutations of the string: ";
    permute(str, 0, n - 1);

    return 0;
}


ans8)
#include <iostream>
#include <vector>
using namespace std;

long long productOfArray(vector<int>& arr) {
    long long product = 1;
    for (int num : arr) {
        product *= num;
    }
    return product;
}

int main() {
    vector<int> arr = {1, 2, 3, 4, 5};
    long long product = productOfArray(arr);

    cout << "Product of all array elements: " << product << endl;

    return 0;
}

